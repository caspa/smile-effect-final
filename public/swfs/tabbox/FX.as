import mx.utils.Delegate;import mx.transitions.Tween;import mx.transitions.easing.*;import flash.geom.Point;import flash.filters.DropShadowFilter;import flash.filters.BlurFilter;import flash.filters.GlowFilter;class FX {	public static var hover_color:Number = 0xFF0000;	public static var active_color:Number = 0x000000;	public static var inactive_color:Number = 0x666666;	public static var foreground_color:Number = 0x000000;	public static var background_color:Number = 0xFFFFFF;	public static var color:Array = new Array();	public static var effect:Array = new Array();	public static var effect_id:Array = new Array();	public static var action:Array = new Array();	public static var value:Array = new Array();	public static var shadow;	public static var blur;	public static var glow;	public var x:Number;	public var y:Number;	public var xscale:Number;	public var yscale:Number;	public var is_zooming:Boolean;	public var tmp;	public static var fade;	public static var tab:Array = new Array();	public static var speed:Number = 30;	public static var interval:Number = 200;	public static var joker_id:Number = 0;	public function FX() {		this.x = 0;		this.y = 0;		this.xscale = 0;		this.yscale = 0;		this.is_zooming = false;	}	public static function fill(container:MovieClip, color:Number, alpha:Number, width:Number, height:Number, depth:Number, x:Number, y:Number) {		var shape = container.createEmptyMovieClip("fx_fill_"+FX.joker(), depth);		trace(shape._name);		shape.beginFill(color,alpha);		shape.moveTo(0,0);		shape.lineTo(width,0);		shape.lineTo(width,height);		shape.lineTo(0,height);		shape.lineTo(0,0);		shape.endFill();		shape._x = x;		shape._y = y;		return shape;	}	public static function joker() {		return FX.joker_id++;	}	public static function set_colors(hover_color:Number, active_color:Number, inactive_color:Number, background_color:Number) {		FX.hover_color = hover_color;		FX.active_color = active_color;		FX.inactive_color = inactive_color;		FX.foreground_color = foreground_color;		FX.background_color = background_color;	}	public static function resize(mc:MovieClip, maxwidth:Number, maxheight:Number, x, y) {		var name = mc._name+"_zoom";		var ratio:Number;		ratio = mc._height/mc._width;		if (mc._width>maxwidth) {			mc._width = maxwidth;			mc._height = Math.round(mc._width*ratio);		}		if (mc._height>maxheight) {			mc._height = maxheight;			mc._width = Math.round(mc._height/ratio);		}		if (x) {			x -= mc._width/2;		}		if (y) {			y -= mc._height/2;		}		if (x | y) {			FX.move(mc,name,x,y);		}	}	public static function zoom2(obj, maxwidth:Number, maxheight:Number, x:Number, y:Number, src) {		//trace(x+"|"+y);		var name = obj._name+"_zoom";		FX.kill(name);		obj.x = 0;		obj.y = 0;		var size = Util.calcSize(obj, maxwidth, maxheight);		if (size.a && size.b) {			if (size.a.height<size.b.height) {				obj.format = false;			} else {				obj.format = true;			}		} else {			obj.format = true;		}		if (obj.format) {			obj.value = obj._width;			obj.max = maxwidth;		} else {			obj.value = obj._height;			obj.max = maxheight;		}		FX.action[name] = new Tween(obj, null, Strong.easeInOut, obj.value, obj.max, 100, false);		FX.action[name].onMotionChanged = function() {			if (obj.format) {				FX.action[name].obj._width = FX.action[name].position;				FX.action[name].obj._height = FX.action[name].position*FX.action[name].obj.ratio;				FX.action[name].obj._x = (Stage.width/2)-((FX.action[name].position+obj.x)/2);				FX.action[name].obj._y = (Stage.height/2)-(((FX.action[name].position+obj.y)*FX.action[name].obj.ratio)/2);			} else {				FX.action[name].obj._height = FX.action[name].position;				FX.action[name].obj._width = FX.action[name].position/FX.action[name].obj.ratio;				FX.action[name].obj._y = (Stage.height/2)-((FX.action[name].position+obj.y)/2);				FX.action[name].obj._x = (Stage.width/2)-(((FX.action[name].position+obj.x)/FX.action[name].obj.ratio)/2);			}		};		return FX.action[name];	}	public function scroll_v(mc:MovieClip, y:Number) {		if (y>0) {			y = 0;		} else if (y<(Stage.height-mc._height)) {			y = Stage.height-mc._height;		}		FX.slide(mc,null,y,100);	}	public static function center(obj, x:Number, y:Number):Point {		x = x ? x : 0;		y = y ? y : 0;		var p:Point = new Point((x/2)-(obj._width/2), (y/2)-(obj._height/2));		return p;	}	public static function align_center(obj, offset_x:Number, offset_y:Number):Point {		offset_x = offset_x ? offset_x : 0;		offset_y = offset_y ? offset_y : 0;		var p:Point = new Point((Stage.width/2)-(obj._width/2)+offset_x, (Stage.height/2)-(obj._height/2)+offset_y);		obj._x = p.x;		obj._y = p.y;		return p;	}	public static function set_color(name:String, mc:MovieClip, color:Number) {		FX.color[name] = new Color(mc);		FX.color[name].setRGB(color);	}	public static function fade_color(name:String, mc:MovieClip, background_color:Number, foreground_color:Number) {		FX.run(name,mc,name,null,background_color,foreground_color,FX.speed,false,null,FX.colorize);	}	public static function colorize(tween:Tween) {		FX.set_color(String(tween.prop),MovieClip(tween.obj),Number(tween.position));	}	public static function set_shadow(name:String, distance:Number, angle:Number, color:Number, alpha:Number, blurX:Number, blurY:Number, strength:Number, quality:Number, inner:Boolean, knockout:Boolean, hideObject:Boolean):Void {		FX.effect[name] = new DropShadowFilter(distance, angle, color, alpha, blurX, blurY, strength, quality, inner, knockout, hideObject);		FX.set_fx_id(name,FX.effect.length-1);	}	public static function dropshadow(mc:MovieClip, distance:Number, angle:Number, color:Number, alpha:Number, blurX:Number, blurY:Number, strength:Number, quality:Number, inner:Boolean, knockout:Boolean, hideObject:Boolean):Void {		var dropshadow = new DropShadowFilter(distance, angle, color, alpha, blurX, blurY, strength, quality, inner, knockout, hideObject);		mc.filters = [dropshadow];	}	public static function set_blur(name:String, blurX:Number, blurY:Number, quality:Number):Void {		FX.effect[name] = new BlurFilter(blurX, blurY, quality);		FX.set_fx_id(name,FX.effect.length-1);	}	public static function set_glow(name:String, color:Number, alpha:Number, blurX:Number, blurY:Number, strength:Number, quality:Number, inner:Boolean, knockout:Boolean):Void {		FX.effect[name] = new GlowFilter(color, alpha, blurX, blurY, strength, quality, inner, knockout);		FX.set_fx_id(name,FX.effect.length-1);	}	public static function set_fx(name:String, mc:MovieClip) {		mc.filters = [FX.effect[name]];	}	private static function set_fx_id(name:String, id:Number) {		FX.effect_id[name] = id;	}	public static function remove_fx(name:String, mc:MovieClip) {		mc.filters = [];	}	public static function is_fx(name:String) {		return FX.effect[name] && true;	}	public static function timeout(name:String, scope, onfinish:Function, timeout:Number):Tween {		FX.kill(name);		FX.action[name] = new Tween(null, null, null, null, null, timeout, false);		if (onfinish && scope) {			FX.action[name].onMotionFinished = Delegate.create(scope, onfinish);		}		return FX.action[name];	}	public static function delay(name:String, obj, prop:String, value, timeout:Number):Tween {		FX.kill(name);		FX.action[name] = new Tween(null, null, null, null, null, timeout, false);		FX.action[name].onMotionFinished = function() {			obj[prop] = value;		};		return FX.action[name];	}	public static function run(name:String, obj, prop, type, from, to, speed:Number, loop:Boolean, scope_onmotion, onmotion:Function, scope_onfinish, onfinish:Function):Tween {		FX.kill(name);		FX.action[name] = FX.play(name, obj, prop, type, from, to, speed, loop, scope_onfinish, onfinish);		FX.action[name].onMotionChanged = Delegate.create(scope_onmotion, onmotion);		return FX.action[name];	}	public static function countdown(name:String, from, to, speed:Number, scope_onmotion, onmotion:Function, scope_onfinish, onfinish:Function):Tween {		//if((FX.action[name].position==from)||(FX.action[name].position==to)){		if (!FX.action[name]) {			FX.kill(name);			FX.action[name] = FX.play(name, null, "i", Elastic.easeOut, from, to, FX.speed, false, scope_onfinish, onfinish);			FX.action[name].onMotionChanged = Delegate.create(scope_onmotion, onmotion);		}		return FX.action[name];	}	public static function play(name:String, obj, prop, type, from, to, speed:Number, loop:Boolean, scope, onfinish:Function, reverse:Boolean):Tween {		FX.kill(name);		FX.action[name] = new Tween(obj, prop, type, from, to, speed, false);		if (!reverse && onfinish && scope) {			FX.action[name].onMotionFinished = Delegate.create(scope, onfinish);		}		if (reverse) {			if (onfinish) {				FX.action[name].onMotionFinished = Delegate.create(scope, onfinish);			}		}		if (loop) {			FX.action[name].onMotionFinished = function() {				this.yoyo();			};		}		return FX.action[name];	}	public static function flip_btn(a:MovieClip, b:MovieClip, shadow:MovieClip, drop_shadow:MovieClip) {		var speed=10;		var tween_a;		var tween_b;		tween_a = FX.stretch(a, 1, null, speed, null);		FX.move(a,Stage.width/2,null,speed);		if (shadow != null) {			FX.fade_in(shadow,speed);		}		if (drop_shadow != null) {			drop_shadow._x=0;			FX.move(drop_shadow,Stage.width/2,null,speed);		}		tween_a.onMotionFinished = function() {			a._visible = false;			b._visible = true;			if (shadow != null) {				FX.fade_out(shadow,speed,true);			}			if (drop_shadow != null) {				FX.move(drop_shadow,Stage.width,null,speed);			}			FX.stretch(b,100,null,speed);			FX.move(b,0,null,speed);		};	}	public static function round_edges(mc:MovieClip, rad:Number, width:Number, height:Number,x:Number,y:Number):MovieClip {		width = (width) ? width : mc._width;		height = (height) ? height : mc._height;		var cstroke = {width:0, color:0xFF0000, alpha:100};		var ccolor = {color:0x000000, alpha:100};		x=x!=null?x:0;		y=y!=null?y:0;		var edges = new RoundedRectangle(mc, width, height, rad, x, y, cstroke, ccolor);		mc.setMask(edges.shape);		return edges.shape;	}	public static function move(mc:MovieClip, x:Number, y:Number, speed, scope, onfinish:Function) {		speed = speed ? speed : FX.speed;		var name = mc._name+"_move";		FX.kill(name);		if (x != null) {			FX.play(name,mc,"_x",Strong.easeOut,mc._x,x,speed,false,scope,onfinish);		}		if (y != null) {			FX.play(name,mc,"_y",Strong.easeOut,mc._y,y,speed,false,scope,onfinish);		}		return FX.action[name];	}	public static function move_inside(mc:MovieClip, x:Number, y:Number, minx:Number, miny:Number, maxx:Number, maxy:Number, speed, scope, onfinish:Function) {		speed = speed ? speed : FX.speed;		var name = mc._name+"_move";		FX.kill(name);		if (x != null) {			if (x<minx) {				x = minx;			} else if (x>maxx) {				x = maxx;			}			FX.play(name,mc,"_x",Strong.easeOut,mc._x,x,speed,false,scope,onfinish);		}		if (y != null) {			if (y<miny) {				y = miny;			} else if (y>maxy) {				y = maxy;			}			FX.play(name,mc,"_y",Strong.easeOut,mc._y,y,speed,false,scope,onfinish);		}		return FX.action[name];	}	public static function stretch(mc:MovieClip, width:Number, height:Number, speed, scope, onfinish:Function) {		speed = speed ? speed : FX.speed;		var name = mc._name+"_stretch";		FX.kill(name);		if (width != null) {			FX.play(name,mc,"_xscale",null,mc._xscale,width,speed,false,scope,onfinish);		}		if (height != null) {			FX.play(name,mc,"_yscale",Strong.easeOut,mc._yscale,height,speed,false,scope,onfinish);		}		return FX.action[name];	}	public static function elastic_stretch(mc:MovieClip, width:Number, height:Number, speed, scope, onfinish:Function) {		speed = speed ? speed : FX.speed;		var name = mc._name+"_stretch";		FX.kill(name);		if (width != null) {			FX.play(name,mc,"_xscale",Elastic.easeOut,mc._xscale,width,speed,false,scope,onfinish);		}		if (height != null) {			FX.play(name,mc,"_yscale",Elastic.easeOut,mc._yscale,height,speed,false,scope,onfinish);		}		return FX.action[name];	}	public static function hover(mc:MovieClip, width:Number, height:Number, x:Number, y:Number, speed, scope, onfinish:Function) {		speed = speed ? speed : FX.speed;		var name = mc._name+"_stretch";		FX.kill(name);		if (width != null) {			FX.play(name,mc,"_width",Elastic.easeOut,mc._width,width,speed,false,scope,onfinish);		}		if (height != null) {			FX.play(name,mc,"_height",Elastic.easeOut,mc._height,height,speed,false,scope,onfinish);		}		if (x != null) {			FX.play(name,mc,"_x",Elastic.easeOut,mc._x,x,speed,false,scope,onfinish);		}		if (y != null) {			FX.play(name,mc,"_y",Elastic.easeOut,mc._y,y,speed,false,scope,onfinish);		}		return FX.action[name];	}	public static function slide_scroll(name:String, mc:MovieClip, x:Number, y:Number, speed, scope_onmotion, onmotion:Function, scope, onfinish:Function) {		speed = speed ? speed : FX.speed;		FX.kill(name);		if (x != null) {			FX.play(name,mc,"_x",Strong.easeOut,mc._x,x,speed,false,scope,onfinish);		}		if (y != null) {			FX.play(name,mc,"_y",Strong.easeOut,mc._y,y,speed,false,scope,onfinish);		}		FX.action[name].onMotionChanged = Delegate.create(scope_onmotion, onmotion);		return FX.action[name];	}	public static function slide(mc:MovieClip, x:Number, y:Number, speed, scope, onfinish:Function) {		speed = speed ? speed : FX.speed;		var name = mc._name+"_move";		FX.kill(name);		if (x != null) {			FX.play(name,mc,"_x",Strong.easeInOut,mc._x,x,speed,false,scope,onfinish);		}		if (y != null) {			FX.play(name,mc,"_y",Strong.easeInOut,mc._y,y,speed,false,scope,onfinish);		}		return FX.action[name];	}	public static function zoom(mc:MovieClip, width:Number, height:Number, speed, scope, onfinish:Function) {		speed = speed ? speed : FX.speed;		var name = mc._name+"_scale";		FX.kill(name);		if (width != null) {			FX.play(name,mc,"_width",Strong.easeOut,mc._width,width,speed,false,scope,onfinish);		}		if (height != null) {			FX.play(name,mc,"_height",Strong.easeOut,mc._height,height,speed,false,scope,onfinish);		}		return FX.action[name];	}	public static function drop_from(mc:MovieClip, x, y):Void {		if (x != null) {			mc._x = x-mc._width;		}		if (y != null) {			mc._y = y-mc._height;		}	}	public static function drop_in(mc:MovieClip, x:Number, y:Number, speed, scope, onfinish:Function) {		speed = speed ? speed : FX.speed;		var namex = mc._name+"_move_x";		var namey = mc._name+"_move_y";		FX.kill(namex);		FX.kill(namey);		var tweens:Object = new Object();		if (x != null) {			tweens.x = FX.play(namex, mc, "_x", Strong.easeOut, mc._x, x, speed, false, scope, onfinish);		}		if (y != null) {			tweens.y = FX.play(namey, mc, "_y", Strong.easeOut, mc._y, y, speed, false, scope, onfinish);		}		return tweens;	}	public static function bounce_move(mc:MovieClip, x:Number, y:Number, speed, scope, onfinish:Function) {		speed = speed ? speed : FX.speed;		var name = mc._name+"_move";		FX.kill(name);		if (x != null) {			FX.play(name,mc,"_x",Bounce.easeOut,mc._x,x,speed,false,scope,onfinish);		}		if (y != null) {			FX.play(name,mc,"_y",Bounce.easeOut,mc._y,y,speed,false,scope,onfinish);		}	}	public static function elastic_move(mc:MovieClip, x:Number, y:Number, speed, scope, onfinish:Function) {		speed = speed ? speed : FX.speed;		var name = mc._name+"_move";		FX.kill(name);		if (x != null) {			FX.play(name,mc,"_x",Elastic.easeOut,mc._x,x,speed,false,scope,onfinish);		}		if (y != null) {			FX.play(name,mc,"_y",Elastic.easeOut,mc._y,y,speed,false,scope,onfinish);		}	}	public static function place(mc:MovieClip, name:String, type:String, x:Number, y:Number, speed:Number, scope, onfinish:Function) {		var envelope = null;		if (!speed) {			speed = FX.speed;		}		switch (type) {			case "normal" :				envelope = Regular.easeOut;				break;			case "strong" :				envelope = Strong.easeOut;				break;			case "elastic" :				envelope = Elastic.easeOut;				break;			case "bounce" :				envelope = Bounce.easeOut;				break;			default :				envelope = Regular.easeOut;		}		if (x != null) {			FX.play(name,mc,"_x",envelope,mc._x,x,speed,false,scope,onfinish);		}		if (y != null) {			FX.play(name,mc,"_y",envelope,mc._y,y,speed,false,scope,onfinish);		}	}	public static function bounce(mc:MovieClip, name:String, x:Number, y:Number, scope, onfinish:Function) {		if (x != null) {			FX.play(name,mc,"_x",Bounce.easeOut,mc._x,x,FX.speed,false,scope,onfinish);		}		if (y != null) {			FX.play(name,mc,"_y",Bounce.easeOut,mc._y,y,FX.speed,false,scope,onfinish);		}	}	public static function slowmotion(mc:MovieClip, name:String, x:Number, y:Number, scope, onfinish:Function) {		if (x != null) {			FX.play(name,mc,"_x",Elastic.easeOut,mc._x,x,FX.speed*5,false,scope,onfinish);		}		if (y != null) {			FX.play(name,mc,"_y",Elastic.easeOut,mc._y,y,FX.speed*5,false,scope,onfinish);		}	}	public static function bounce_in(mc:MovieClip, name:String, x:Number, y:Number, scope, onfinish:Function) {		FX.fade_in(mc);		FX.bounce(mc,"bounce_in_move_"+name,x,y,scope,onfinish);	}	public static function drop_in2(mc:MovieClip, x:Number, y:Number, scope, onfinish:Function) {		var name = mc._name+"_drop";		kill(name);		FX.fade_in(mc);		FX.move(mc,x,y,FX.speed,scope,onfinish);	}	public static function drop_out(mc:MovieClip, x:Number, y:Number, scope, onfinish:Function) {		var name = mc._name+"_drop";		kill(name);		FX.fade_out(mc);		FX.move(mc,x,y,FX.speed,scope,onfinish);	}	public static function slow_drop_in(mc:MovieClip, name:String, x:Number, y:Number, scope, onfinish:Function) {		FX.fade_in(mc);		FX.slowmotion(mc,"drop_in_move_"+name,x,y,scope,onfinish);	}	public static function slow_drop_out(mc:MovieClip, name:String, x:Number, y:Number, scope, onfinish:Function) {		FX.fade_out(mc);		FX.slowmotion(mc,"drop_in_move_"+name,x,y,scope,onfinish);	}	public static function fade_in(mc:MovieClip, speed:Number, scope, onfinish:Function, reverse:Boolean) {		var name = mc._name+"_fade";		FX.kill(name);		speed = speed ? speed : FX.speed;		mc._visible = true;		if ((mc._alpha != 100) || onfinish || reverse) {			FX.play(name,mc,"_alpha",Strong.easeInOut,mc._alpha,100,speed,false,scope,onfinish,reverse);		}	}	public static function fade_to(mc:MovieClip, to:Number, speed:Number, scope, onfinish:Function, reverse:Boolean) {		var name = mc._name+"_fade";		FX.kill(name);		speed = speed ? speed : FX.speed;		mc._visible = true;		FX.play(name,mc,"_alpha",Strong.easeOut,mc._alpha,to,speed,false,scope,onfinish,reverse);	}	public static function rotate(mc:MovieClip, turns:Number, speed:Number, counterclockwise:Boolean, angle:Number, scope, onfinish:Function) {		var name = mc._name+"_rotate";		FX.kill(name);		speed = speed ? speed : FX.speed;		angle = mc._rotation+((angle ? angle : 0)+(turns ? turns*360 : 0))*(counterclockwise ? -1 : 1);		FX.play(name,mc,"_rotation",Strong.easeInOut,mc._rotation,angle,speed,false,scope,onfinish);	}	public static function flip(mc:MovieClip, turns:Number, speed:Number, counterclockwise:Boolean, angle:Number, scope, onfinish:Function) {		var name = mc._name+"_rotate";		FX.kill(name);		speed = speed!=null ? speed : FX.speed;		angle = ((angle!=null ? angle : 0)+(turns ? turns*360 : 0))*(counterclockwise ? -1 : 1);		FX.play(name,mc,"_rotation",Strong.easeOut,mc._rotation,angle,speed,false,scope,onfinish);	}	public static function fade_out(mc:MovieClip, speed:Number, hide:Boolean, scope, onfinish:Function) {		var name = mc._name+"_fade";		FX.kill(name);		speed = speed ? speed : FX.speed;		if ((mc._alpha != 0) || onfinish) {			FX.play(name,mc,"_alpha",Strong.easeInOut,mc._alpha,0,speed,false,scope,onfinish);		}		if (hide) {			FX.delay(name,mc,"_visible",false,speed);		}	}	public static function slow_fade_in(mc:MovieClip, name:String, scope, onfinish:Function) {		FX.delay(name,mc,"_visible",true,1);		if (mc._alpha != 100) {			FX.play(name,mc,"_alpha",Strong.easeInOut,mc._alpha,100,FX.speed*3,false,scope,onfinish);		}	}	public static function slow_fade_out(mc:MovieClip, name:String, scope, onfinish:Function, speed:Number) {		if (mc._alpha != 0) {			FX.play(name,mc,"_alpha",Strong.easeInOut,mc._alpha,0,FX.speed*3,false,scope,onfinish);		}		FX.delay(name,mc,"_visible",false,FX.speed*5);	}	public static function fade_half_out(mc:MovieClip, name:String, scope, onfinish:Function) {		if (mc._alpha != 0) {			FX.play(name,mc,"_alpha",Strong.easeOut,mc._alpha,30,FX.speed,false,scope,onfinish);		}	}	public static function highlight(mc:MovieClip, name:String, scope, onfinish:Function) {		if (mc._alpha != 0) {			FX.play(name,mc,"_alpha",Regular.easeOut,mc._alpha,100,FX.speed,false,scope,onfinish);		}	}	public static function tab_in(name:String, mc:MovieClip) {		FX.play("tab_"+name,mc,"_x",Elastic.easeOut,mc._x,10,FX.speed,false);		FX.action[name].onMotionFinished = function() {			FX.action[name] = null;		};	}	public static function tab_out(name:String, mc:MovieClip) {		if (!FX.action[name]) {			FX.play("tab_"+name,mc,"_x",Elastic.easeOut,mc._x,0,FX.speed,false);		}	}	public static function kill(name:String):Void {		if (FX.action[name]) {			FX.action[name].onMotionFinished = null;			FX.action[name].onMotionChanged = null;			FX.action[name] = null;		}	}	public function paint(mc:MovieClip) {		if (FX.shadow) {			mc.filters = [FX.shadow];		}		if (FX.blur) {			mc.filters = [FX.blur];		}		if (FX.glow) {			mc.filters = [FX.glow];		}	}	public static function blur_in(mc:MovieClip, from:Number, to:Number, speed:Number, scope, onfinish:Function) {		var name = mc._name+"_blur";		FX.kill(name);		speed = speed ? speed : FX.speed;		var blur = new BlurFilter(0, 0, 1);		FX.play(name,blur,"blurX",Strong.easeOut,from,to,speed,false,scope,onfinish);		FX.action[name].onMotionChanged = function() {			blur.blurY = blur.blurX;			mc.filters = [blur];		};	}	public static function fade_in_blur(mc:MovieClip, speed:Number) {		var blur = new BlurFilter(0, 0, 1);		var blur_tween = FX.play("blur_in_"+mc._name, blur, "blurX", Strong.easeInOut, 80, 0, speed, false);		blur_tween.onMotionChanged = function() {			blur.blurY = blur.blurX;			mc.filters = [blur];		};	}}/*public function fade_in_glow(mc:MovieClip) {if (!this.glow) {this.glow = new GlowFilter(0xff0000, .8, 50, 50, 1, 3, false, false);}var glow_tween = this.tween(this.glow, "alpha", Strong.easeOut, 0, 1, 20, false);glow_tween.onMotionChanged = function() {this.fx.glow.glowY = this.fx.glow.glowX;mc.filters = [this.fx.glow];//trace(mc);};}public function fade_out_glow(mc:MovieClip) {if (!this.glow) {this.glow = new GlowFilter(0xff0000, .8, 50, 50, 1, 3, false, false);}var glow_tween = this.tween(this.glow, "alpha", Strong.easeOut, 1, 0, 20, false);glow_tween.onMotionChanged = function() {this.fx.glow.glowY = this.fx.glow.glowX;mc.filters = [this.fx.glow];};}public function fade_in_zoom(mc:MovieClip) {this.tmp = this.tween(mc, "_y", Elastic.easeOut, mc._y, -23, FX.speed, false);var tmp_alpha = this.tween(mc, "_alpha", Elastic.easeOut, mc._alpha, 100, FX.speed, false);}public function fade_out_zoom(mc:MovieClip) {//this.tmp = this.tween(mc, "_y", Strong.easeOut, mc._y, 30, FX.speed, false);var tmp_alpha = this.tween(mc, "_alpha", Strong.easeOut, mc._alpha, 0, FX.speed, false);tmp_alpha.onMotionFinished = function() {mc._y = 30;};}*/