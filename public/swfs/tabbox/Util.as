import mx.utils.Delegate;import flash.geom.Matrix;import flash.geom.Point;import flash.external.ExternalInterface;import flash.display.BitmapData;class Util {	public static var cursor:Object = new Object();	public static var mouse:Object = new Object();	public static var test:Object = new Object();	public static var objtest:Object = new Object();	public static var objID;	public static var resize_html_height:Number=0;	function Util() {	}	public static function inject_html(id, html:String) {		var js:String = "function(){function inject_html(id,html_code){document.getElementById(id).innerHTML=html_code;};inject_html('"+id+"','"+html+"');}";		ExternalInterface.call(js);	}	public static function swap_css(id:String, src:String) {		var js:String = "function(){function swap_css(id,src){document.getElementById(id).href = src;};swap_css('"+id+"','"+src+"');}";		ExternalInterface.call(js);	}	public static function resize_html() {		var args = arguments;		var id = Util.get_parent(Util.objID);		Util.resize_html_height = args.sort(Array.NUMERIC).pop();		var js:String = "function(){function resize_swf(id,height){document.getElementById(id).style.height=height+'px';};resize_swf('"+Util.get_parent(Util.objID)+"',"+Util.resize_html_height+");}";		ExternalInterface.call(js);	}	public static function slide_resize_html(height) {		Util.resize_html_height = height;		var js:String = "function(){function resize_swf(id,height){document.getElementById(id).style.height=height+'px';};resize_swf('"+Util.get_parent(Util.objID)+"',"+Util.resize_html_height+");}";		ExternalInterface.call(js);	}	public static function max() {		var args = arguments;		return args.sort(Array.NUMERIC).pop();	}	public static function alert(txt:String) {		var js:String = "function(){alert('info: "+txt+"');}";		ExternalInterface.call(js);	}	public static function empty() {		trace("empty function");	}	public static function get_parent(id:String) {		var js:String = "function(id){return document.getElementById(id).parentNode.id;}";		return ExternalInterface.call(js, String(id));	}	public static function html_object() {		var unique_name = "unique_id_"+Math.floor(Math.random()*1000);		ExternalInterface.addCallback(unique_name,Util.objtest,Util.empty);		var js:String = "function(callbackName){";		js += "var i;for(i=0;i<document.embeds.length; i++){";		js += "if(document.embeds[i][callbackName]){";		js += "return document.embeds[i].name;";		js += "}";		js += "}";		js += "var objectNodes = document.getElementsByTagName('object');";		js += "for(i=0; i<objectNodes.length; i++){";		js += "if(objectNodes[i][callbackName]){";		js += "return objectNodes[i].id;";		js += "}";		js += "}";		js += "return 'no object-id';";		js += "}";		Util.objID = ExternalInterface.call(js, unique_name);	}	public static function test_area() {		var d1 = _root.getNextHighestDepth();		Util.test.area = _root.createEmptyMovieClip("test_area_"+d1, d1);		var d2 = Util.test.area.getNextHighestDepth();		Util.test.field = Util.test.area.createTextField("test_field_"+d2, d2, 0, 0, 100, 100);		//Util.test.area.onMouseMove = Delegate.create(Util.test, Util.test_move);	}	public static function test_point(mc:MovieClip) {		//var d1 = _root.getNextHighestDepth();		//Util.test.point = mc.attachMovie("btn", "point_"+d1, d1);	}	public static function test_move() {		var p:Point = new Point(_xmouse, _ymouse);		var txt = p.x+" | "+p.y;		var t:Point = Util.transform_coord(p.x, p.y, 1, 1);		txt += t.x+" | "+t.y;		Util.test.field.text = txt;	}	public static function transform_coord(x, y, xratio, yratio):Point {		//trace(x+"_"+y+"_"+xratio+"_"+yratio);		var mat:Matrix = new Matrix();		mat.translate(0,0);		mat.scale(xratio,yratio);		var coord:Point = new Point(x, y);		var target_coord:Point = mat.deltaTransformPoint(coord);		return target_coord;	}	public static function fill_gradient(mc:MovieClip, colors:Array, alphas:Array, ratios:Array, fillType:String, focalpoint:Number, off_x:Number, off_y:Number) {		mc.fillType = fillType ? fillType : "linear";		mc.colors = colors ? colors : [0xDDDDDD, 0xFFFFFF];		mc.alphas = alphas ? alphas : [50, 90];		mc.ratios = ratios ? ratios : [0, 0xFF];		mc.focalPointRatio = focalpoint ? focalpoint : 0.3;		mc.spreadMethod = "pad";		mc.interpolationMethod = "RGB";		mc.matrix = new Matrix();		off_x=off_x?off_x:0;		off_y=off_y?off_y:0;		mc.matrix.createGradientBox(_width,_height,180,off_x,off_y);		mc.beginGradientFill(mc.fillType,mc.colors,mc.alphas,mc.ratios,mc.matrix,mc.spreadMethod,mc.interpolationMethod,mc.focalPointRatio);		mc.moveTo(0,0);		mc.lineTo(0,mc._height);		mc.lineTo(mc._width,mc._height);		mc.lineTo(mc._width,0);		mc.lineTo(0,0);		mc.endFill();	}	public static function createGradientRectangle(container:MovieClip, width:Number, height:Number, colors:Array, alphas:Array, ratios:Array, fillType:String, focalpoint:Number, off_x:Number, off_y:Number):MovieClip {		var depth:Number = container.getNextHighestDepth();		var mc:MovieClip = container.createEmptyMovieClip("util_rect_"+depth, depth);		width = width!=null ? width : Stage.width;		height = height!=null ? height : Stage.height;		mc.fillType = fillType!=null ? fillType : "linear";		mc.colors = colors!=null ? colors : [0xFFFFFF, 0x000000];		mc.alphas = alphas!=null ? alphas : [0, 100];		mc.ratios = ratios!=null ? ratios : [0,0xFF];		mc.focalPointRatio = focalpoint!=null ? focalpoint : 0;		mc.spreadMethod = "pad";		mc.interpolationMethod = "RGB";		mc.matrix = new Matrix();		off_x=off_x?off_x:0;		off_y=off_y?off_y:0;		mc.matrix.createGradientBox(width,height,0,off_x,off_y);		mc.beginGradientFill(mc.fillType,mc.colors,mc.alphas,mc.ratios,mc.matrix,mc.spreadMethod,mc.interpolationMethod,mc.focalPointRatio);		mc.lineTo(0,height);		mc.lineTo(width,height);		mc.lineTo(width,0);		mc.lineTo(0,0);		mc.endFill();		return mc;	}	public static function fill(mc:MovieClip, color:Number) {		with (mc) {			beginFill(color);			lineTo(0,_height);			lineTo(_width,_height);			lineTo(_width,0);			lineTo(0,0);			endFill();		}	}	public static function fill2(container:MovieClip, width:Number, height:Number, color:Number):MovieClip {		var depth:Number = container.getNextHighestDepth();		var mc:MovieClip = container.createEmptyMovieClip("util_rect_"+depth, depth);		width = width ? width : Stage.width;		height = height ? height : Stage.height;		color = color ? color : 0xFFFFFF;		mc.beginFill(color);		mc.lineTo(0,height);		mc.lineTo(width,height);		mc.lineTo(width,0);		mc.lineTo(0,0);		mc.endFill();		return mc;	}	public static function createRectangle(container:MovieClip, width:Number, height:Number, color:Number):MovieClip {		var depth:Number = container.getNextHighestDepth();		var mc:MovieClip = container.createEmptyMovieClip("util_rect_"+depth, depth);		width = width!=null ? width : Stage.width;		height = height!=null ? height : Stage.height;		color = color!=null ? color : 0xFFFFFF;		mc.beginFill(color);		mc.lineTo(0,height);		mc.lineTo(width,height);		mc.lineTo(width,0);		mc.lineTo(0,0);		mc.endFill();		return mc;	}	public static function createLine(container:MovieClip, w:Number, h:Number, x:Number, y:Number, stroke:Object):MovieClip {		var depth:Number = container.getNextHighestDepth();		var mc:MovieClip = container.createEmptyMovieClip("util_rounded_rect_"+depth, depth);		if (!stroke) {			stroke = {width:1, color:0x000000, alpha:100};		}		w = w!=null ? w : 0;		h = h!=null ? h : 0;		mc.lineStyle(stroke.width,stroke.color,stroke.alpha);		mc.moveTo(0,0);		mc.lineTo(w,h);		mc._x = x ? x : 0;		mc._y = y ? y : 0;		return mc;	}	public static function createArea(container:MovieClip, width:Number, height:Number):MovieClip {		var depth:Number = container.getNextHighestDepth();		var mc:MovieClip = container.createEmptyMovieClip("util_area_"+depth, depth);		width = width ? width : Stage.width;		height = height ? height : Stage.height;		mc.beginFill(0x000000,0);		mc.lineTo(0,height);		mc.lineTo(width,height);		mc.lineTo(width,0);		mc.lineTo(0,0);		mc.endFill();		return mc;	}	public static function createEditArea(container:MovieClip, width:Number, height:Number, x:Number, y:Number):MovieClip {		var depth:Number = container.getNextHighestDepth();		var mc:MovieClip = container.createEmptyMovieClip("util_area_"+depth, depth);		width = width ? width : Stage.width;		height = height ? height : Stage.height;		mc.lineStyle(2,0x000000,70);		mc.beginFill(0xFFFFFF,30);		mc.moveTo(x,y);		mc.lineTo(x,height);		mc.lineTo(width,height);		mc.lineTo(width,y);		mc.lineTo(x,y);		mc.endFill();		return mc;	}	public static function createRoundedRectangle(container:MovieClip, w:Number, h:Number, rad:Number, x:Number, y:Number, stroke:Object, fill:Object):MovieClip {		var depth:Number = container.getNextHighestDepth();		var mc:MovieClip = container.createEmptyMovieClip("util_rounded_rect_"+depth, depth);		if (!stroke) {			stroke = {width:0, color:0x000000, alpha:0};		}		if (!stroke && !fill) {			fill = {color:0xFFFFFF, alpha:100};		}		if (stroke && !fill) {			fill = {color:0x000000, alpha:0};		}		w = w ? w : Stage.width;		h = h ? h : Stage.height;		rad = rad ? rad : 5;		mc.lineStyle(stroke.width,stroke.color,stroke.alpha);		mc.beginFill(fill.color,fill.alpha);		mc.moveTo(0+rad,0);		mc.lineTo(w-rad,0);		mc.curveTo(w,0,w,rad);		mc.lineTo(w,h-rad);		mc.curveTo(w,h,w-rad,h);		mc.lineTo(0+rad,h);		mc.curveTo(0,h,0,h-rad);		mc.lineTo(0,0+rad);		mc.curveTo(0,0,0+rad,0);		mc.endFill();		mc._x = x ? x : 0;		mc._y = y ? x : 0;		return mc;	}	public static function createShine(container:MovieClip,w:Number,h:Number):MovieClip {		var depth:Number = container.getNextHighestDepth();		var mc:MovieClip = container.createEmptyMovieClip("util_shine_"+depth, depth);		var fill = {color:0xFFFFFF, alpha:20};		var w = w!=null?w:(h/3)*2;		var h = h!=null?h:(w/3)*2;		mc.beginFill(fill.color,fill.alpha);		mc.moveTo(0,0);		mc.lineTo(w,0);		mc.curveTo(w,w,0,h);		mc.lineTo(0,0);		mc.endFill();		return mc;	}	public static function calcSize(mc:MovieClip, maxwidth:Number, maxheight:Number):Object {		var size:Object = new Object();		var ratio:Number;		ratio = mc._height/mc._width;		if (mc._width>maxwidth) {			size.a = new Object();			size.a.width = maxwidth;			size.a.height = Math.round(size.a.width*ratio);		}		if (mc._height>maxheight) {			size.b = new Object();			size.b.height = maxheight;			size.b.width = Math.round(size.b.height/ratio);		}		return size;	}	public static function setCursor(cur:MovieClip, align:String) {		Util.cursor.mc = cur;		Util.cursor.x = cur._x;		Util.cursor.y = cur._y;		var clip_x:Number;		var clip_y:Number;		switch (align) {			case "center" :				clip_x = Util.cursor.mc._width/2;				clip_y = Util.cursor.mc._height/2;				break;			case "top" :				clip_x = 0;				clip_y = Util.cursor.mc._height;				break;			case "bottom" :				clip_x = 0;				clip_y = 0;				break;			default :				clip_x = Util.cursor.mc._width/2;				clip_y = Util.cursor.mc._height/2;		}		Mouse.hide();		Util.cursor.mc.onMouseMove = function() {			this._x = this._parent._xmouse-clip_x;			this._y = this._parent._ymouse-clip_y;			updateAfterEvent();		};	}	public static function resetCursor() {		Util.cursor.mc.onMouseMove = null;		Util.cursor.mc._x = Util.cursor.x;		Util.cursor.mc._y = Util.cursor.y;		Mouse.show();	}	public static function onMouseRoll(mc:MovieClip, scope, func:Function) {		var listener:Object = new Object();		func = Delegate.create(scope, func);		listener.onMouseMove = function() {			if (mc.hitTest(_xmouse, _ymouse)) {				func();			}		};		Mouse.addListener(listener);	}	public static function draw(sheet:MovieClip, thickness:Number, color:Number, alpha:Number) {		var listener:Object = new Object();		thickness = thickness ? thickness : 5;		color = color ? color : 0xFF6600;		alpha = alpha ? alpha : 100;		listener.onMouseDown = function() {			this.is_drawing = true;			sheet.lineStyle(thickness,color,alpha,false);			sheet.moveTo(_xmouse,_ymouse);		};		listener.onMouseMove = function() {			if (this.is_drawing) {				sheet.lineTo(_xmouse,_ymouse);			}			updateAfterEvent();		};		listener.onMouseUp = function() {			this.is_drawing = false;		};		Mouse.addListener(listener);	}	public static function getAttributes(node:XMLNode):Object {		var attributes = new Array();		for (var name in node.attributes) {			attributes[name] = node.attributes[name];		}		return attributes;	}	public static function getText(node:XMLNode):Object {		//if (node.nodeType == 3) {		return node.nodeValue;		//}		//return "";	}	public static function readDate(str:String) {		var data:Array = str.split(" ");		var date_data = data[0].split("-");		return new Date(Number(date_data[0]*1), Number(date_data[1]*1), Number(date_data[2]*1));	}	public static function formatDate(date:Date, type:String):String {		var format = "";		switch (type) {			case "german" :				format = date.getDate()+"."+date.getMonth()+"."+date.getFullYear();				break;			default :				format = date.getDate()+"."+date.getMonth()+"."+date.getFullYear();		}		return format;	}	public static function percent_string(val, t:Number):Number {		var p:Number = Number(val.split("%").shift());		return (t*(p/100));	}	public static function percent(p:Number, t:Number):Number {		return (t*(p/100));	}	public static function range(val, t:Number, range:Number):Number {		var p:Number = Number(val.split("%").shift());		return (t*(p/range));	}	public static function align(container:MovieClip, h, v, mcs) {		var i, l = arguments.length, b, coords;		var tb = container.getBounds(_root);		for (i=3; i<l; i++) {			var ab = arguments[i].getBounds(_root);			if (h == "left") {				arguments[i]._x += tb.xmin-ab.xmin;			} else if (h == "right") {				arguments[i]._x += tb.xmax-ab.xmax;			} else if (h == "center") {				arguments[i]._x += tb.xmin+container._width/2-ab.xmin-arguments[i]._width/2;			}			// center align y axis                                                                                           			if (v == "top") {				arguments[i]._y += tb.ymin-ab.ymin;			} else if (v == "bottom") {				arguments[i]._y += tb.ymax-ab.ymax;			} else if (v == "center") {				arguments[i]._y += tb.ymin+container._height/2-ab.ymin-arguments[i]._height/2;			}			// center align x axis                                                                                           		}	}	//this is just a simple way to encapsulate MC creation/deletion	public static function CreateMC(linkName:String, instanceName:String) {		var depth = _root.getNextHighestDepth();		if (linkName == "EMPTY_MC") {			return _root.createEmptyMovieClip(instanceName, depth);		} else if (linkName == "TEXT_MC") {			return _root.createTextField(instanceName, depth, 0, 0, 100, 100);		} else {			return _root.attachMovie(linkName, instanceName+depth, depth);		}	}	//from kirupa.com ( http://www.kirupa.com/developer/actionscript/depths2.htm )	//WOW! this was driving me crazy -- createEmptyMovieClip()s wouldn't delete properly!	//woooo!!	public static function DestroyMC(mc:MovieClip):Void {		mc.swapDepths(1048000);		mc.removeMovieClip();	}	//swap the values of a and b	public static function swap(a, b):Void {		var temp = a;		a = b;		b = temp;	}	public static function screenshot(screen:MovieClip, container:MovieClip,width:Number,height:Number):MovieClip {		var myBitmapData:BitmapData = new BitmapData(screen._width, screen._height, true, 0x00FFFFFF);		var screenshot:MovieClip = container.createEmptyMovieClip("screenshot_"+container._name, 2);		screenshot.attachBitmap(myBitmapData,3);		myBitmapData.draw(screen);		//screenshot._width = width;		//screenshot._height = height;		return screenshot;	}}