import mx.events.EventDispatcher;import mx.utils.Delegate;class MultiImageLoader extends EventDispatcher {	public static var IMAGE_COMPLETE   :String = "imagecomplete";	public static var IMAGE_PROGRESS   :String = "imageprogress";	public static var IMAGE_START  :String = "imagestart";	public static var MULTILOADER_START:String = "multistart";	public static var MULTILOADER_COMPLETE :String = "multicomplete";	private var l_mcl:MovieClipLoader;	private var o_mcl_listener:Object = new Object();	private var i_counter:Number = 0;	private var a_identifiers:Array = new Array();	private var a_addresses:Array = new Array();	public function MultiImageLoader() {		build();	}	public function build():Void {		buildLoadObject();	}	public function store(address:String, container:MovieClip):Void {		a_identifiers.push(container);		a_addresses.push(address);	}	public function startLoad():Void {		l_mcl.loadClip(a_addresses[i_counter],a_identifiers[i_counter]);	}	private function buildLoadObject():Void {		l_mcl = new MovieClipLoader();		o_mcl_listener.onLoadStart = Delegate.create(this, onStart);		o_mcl_listener.onLoadProgress = Delegate.create(this, onProgress);		o_mcl_listener.onLoadInit = Delegate.create(this, onInit);		l_mcl.addListener(o_mcl_listener);	}	private function onStart(target:MovieClip):Void {		dispatchEvent({type:MultiImageLoader.IMAGE_START, mc:target});	}	private function onProgress(target:MovieClip, bytesLoaded:Number, bytesTotal:Number):Void {		dispatchEvent({type:MultiImageLoader.IMAGE_PROGRESS, mc:target, bytesloaded:bytesLoaded, bytestotal:bytesTotal});	}	private function onInit(target:MovieClip):Void {		dispatchEvent({type:MultiImageLoader.IMAGE_COMPLETE, mc:target});		if (i_counter<a_addresses.length-1) {			loadNext();		} else {			dispatchEvent({type:MultiImageLoader.MULTILOADER_COMPLETE});		}	}	private function loadNext():Void {		i_counter++;		startLoad();	}	private static var _instance:MultiImageLoader;	public static function getInstance():MultiImageLoader {		if (!_instance) {			_instance = new MultiImageLoader();		}		return _instance;	}}