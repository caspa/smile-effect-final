import mx.utils.Delegate;class FlipBoxLink{	var id:Number;	public static var length=0;	var container:MovieClip;	var panel:MovieClip;	var area:MovieClip;	var label:Label;	var action:MouseAction;	var hit_area:MovieClip;	var url:String;	var selector:MovieClip;	var width:Number;	var height:Number;	var musicbox:MusicBox;	function FlipBoxLink(container:MovieClip, title:String, url:String, font:String, size:Number, bold:Boolean, color:Number, bgcolor:Number, width:Number, height:Number, x:Number,y:Number,hit_area:MovieClip){		this.set_id();		this.url=url;		this.width=width;		this.height=height;		this.container = container;		this.hit_area=hit_area;				this.musicbox = new MusicBox();		this.musicbox.add("open","alarm",100,0);				this.panel = this.container.createEmptyMovieClip("flipbox_link_"+this.id, this.container.getNextHighestDepth());		//this.panel = this.container.attachMovie("menuitem","flipbox_link_"+this.id, this.container.getNextHighestDepth(),{_x:0,_y:0,_width:300,_height:100});		var stroke = {width:1, color:0xFFFFFF, alpha:50};		var stroke2 = {width:1, color:0x000000, alpha:50};		var stroke3 = {width:1, color:0x000000, alpha:100};		var stroke4 = {width:1, color:0xFFFFFF, alpha:30};				this.area=Util.createRectangle(this.panel, width, height,0x999999);				this.selector=Util.createRectangle(this.panel, 500, height, bgcolor);		this.selector._x=this.width;		Util.createLine(this.selector, 0, height, 0, 0,stroke);		Util.createLine(this.selector, 0, height, -1, 0,stroke3);		this.selector.attachMovie("arrow","flipbox_selector_arrow_"+this.id, this.selector.getNextHighestDepth(),{_x:15,_y:this.height/2});		Util.createShine(this.selector,20,height-40);		Util.createLine(this.panel, width-2, null, 1, 0,stroke);		Util.createLine(this.panel, 0, height-2, 0, 1,stroke);		Util.createLine(this.panel, 0, height-2, width-1, 1,stroke2);		this.panel._alpha=50;		//this.panel._width=width;		//this.panel._height=height;		this.panel._x=x;		this.panel._y=y+this.id-1;		this.label=new Label(this.area, title, font, size, bold, color, width, height, 20, height/2-size/2);		this.set_actions();		this.action = MouseAction.lib["href"].clone();		this.interact();	}	function set_id() {		this.id = FlipBoxLink.length++;	}	//ACTIONS / MOUSEACTIONS	function set_actions() {		Action.define("link_href",this,this.href);		Action.define("link_over",this,this.hover);		Action.define("link_out",this,this.hout);		MouseAction.define("href",Action.lib["link_over"],Action.lib["link_out"],null,Action.lib["link_href"]);	}	//ACTION	function interact() {		this.panel.hitArea=this.panel;		this.panel.onRollOver = Delegate.create(this, this.over);		this.panel.onRollOut = Delegate.create(this, this.out);		this.panel.onPress = Delegate.create(this, this.down);		this.panel.onRelease = this.panel.onReleaseOutside=Delegate.create(this, this.up);	}	function over() {		this.action.onmouseover.trigger();	}	function out() {		this.action.onmouseout.trigger();	}	function down() {		this.action.onmousedown.trigger();	}	function up() {		this.action.onmouseup.trigger();	}	function href() {		if (this.url != null) {			getURL(this.url);		}		trace("HREF: "+this.url);	}	function hover(){		FX.fade_to(this.panel,70,50);		FX.move(this.selector,this.width-30,null,10);		this.musicbox.trigger("open",100,0);			}	function hout(){		if(!this.hit_area.hitTest(_xmouse,_ymouse)){			Action.lib["close_menu"].trigger();			trace("out of space!"+_xmouse+" - "+_ymouse);				}		//FX.elastic_move(this.label.panel,20,null,20);		FX.fade_to(this.panel,50,50);		FX.move(this.selector,this.width,null,10);		trace("out: "+this.id);			}}