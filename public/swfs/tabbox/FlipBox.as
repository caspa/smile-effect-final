/*class: VideoTheatreauthor: Jean-Christophe Littfasscopyright: 2009description: Template für einen ImagePlayer*/import mx.utils.Delegate;class FlipBox extends Template {	var id:Number;	public static var length=0;	var container:MovieClip;	var center:MovieClip;	var axis:MovieClip;	var box:MovieClip;	var panel:MovieClip;	var loader:MultiImageLoader;	var items:Array;	var max_count:Number;	var selected:Number;	var action:MouseAction;	var i:Number;	var j:Number;	var area:MovieClip;	var shine:MovieClip;	var musicbox:MusicBox;	var title:Label;	var menu:MovieClip;	var menupane:MovieClip;	var menuarea:MovieClip;	var titlearea:MovieClip;	var shine_mask:MovieClip;	var width:Number;	var height:Number;	var maxheight:Number;	var maxwidth:Number;	var menu_items:Array;	function FlipBox(container:MovieClip) {		this.set_id();		this.container = container ? container : _root;		this.center = this.container.createEmptyMovieClip("flipbox_axis_"+this.id, this.container.getNextHighestDepth());		this.axis = this.center.createEmptyMovieClip("flipbox_center_"+this.id, this.center.getNextHighestDepth());		this.box = this.axis.createEmptyMovieClip("flipbox_box_"+this.id, this.axis.getNextHighestDepth());		this.maxwidth=this.maxheight=440;		this.width=this.height=300;		this.items = new Array();		this.max_count = 0;		this.musicbox = new MusicBox();		this.musicbox.add("open","load",100,0);		this.selected = 0;		this.i = 0;		this.j = 1;		this.loader = MultiImageLoader.getInstance();		this.loader.addEventListener(MultiImageLoader.IMAGE_START,Delegate.create(this, onImageStart));		this.loader.addEventListener(MultiImageLoader.IMAGE_PROGRESS,Delegate.create(this, onImageProgress));		this.loader.addEventListener(MultiImageLoader.IMAGE_COMPLETE,Delegate.create(this, onImageComplete));		this.loader.addEventListener(MultiImageLoader.MULTILOADER_COMPLETE,Delegate.create(this, onMultiComplete));	}	function set_id() {		this.id = FlipBox.length++;	}	function init() {		trace("init flipbox...");		this.box._x=70;//(this.maxwidth-this.width)/2;		this.box._y=70;//(this.maxheight-this.height)/2;		//this.panel = this.box.createEmptyMovieClip("flipbox_panel_"+this.id, this.box.getNextHighestDepth());		Util.createRectangle(this.box,this.width,this.height,this.gui.data.color);		this.box.attachMovie("arrow","flipbox_arrow_"+this.id, this.box.getNextHighestDepth(),{_rotation:270,_x:this.width/2,_y:50,_xscale:300,_yscale:300,_alpha:20});			this.menuarea = Util.createArea(this.container, 200, this.height-10);		this.menuarea._x = 255;		this.menuarea._y = 75;		var fill={color:0x000000, alpha:100};		this.shine_mask = Util.createRoundedRectangle(this.axis, this.width, this.height, 20, 70, 70, null, fill);		this.titlearea = Util.createArea(this.container, 87, this.height-10);		this.titlearea._x = 75;		this.titlearea._y = 75;		this.area = Util.createArea(this.container, this.width-10, this.height-10);		this.area._x = 75;		this.area._y = 75;		//this.panel._x = 5;		//this.panel._y = 5;		this.center._x=this.maxwidth/2;		this.center._y=this.maxheight/2;		this.axis._x =-(this.maxwidth/2);		this.axis._y =-(this.maxheight/2);				this.title=new Label(this.box, this.gui.data.title, "Text", 36, false, 0xFFFFFF, 260, 36, 30,240);		this.set_menu();		//this.h_out();		this.shine = Util.createShine(_root,null,Stage.height);		this.shine.setMask(this.shine_mask);		FX.dropshadow(this.axis,2,45,0x000000,50,3,3,1,100);		FX.round_edges(this.menu,20,this.width,this.height);		FX.round_edges(this.box,20,this.width,this.height,0,0);		this.set_actions();		FX.fade_in(this.box,100);		this.action = MouseAction.lib["flip_btn"].clone();		this.interact();}function set_menu(){		this.menu_items=new Array();		this.menupane = this.box.createEmptyMovieClip("flipbox_menupane_"+this.id, this.box.getNextHighestDepth());		//this.menupane._x=0;		//this.menupane._y=0;		this.menu=Util.createRectangle(this.menupane,300,300,0x000000);		//this.menuarea=Util.createArea(this.menu,300,300);		this.menupane._rotation=270;		this.menupane._x=0;		this.menupane._y=0;		var y=0;		var h=this.height/this.gui.data.link.length;		var size=24;		var j=this.gui.data.link.length;		if(j<4){			size=24;		}		else if(j<8){			size=18;		}		else if(j<12){			size=14;		}		for(var i=0; i<this.gui.data.link.length; i++){			this.menu_items[i]=new FlipBoxLink(this.menupane, this.gui.data.link[i].title,this.gui.data.link[i].url, "Text", size, false, 0xFFFFFF,this.gui.data.color, 209, h, 1, y,this.area);			y+=h;		}}	function connect(gui:Gui) {		trace("connect flipbox...");		this.gui = gui;		this.init();		//this.load();	}	function onImageStart(e:Object) {		trace("onImageStart: "+e.mc._name);	}	function onImageProgress(e:Object) {		trace("onImageProgress: "+e.bytesloaded);	}	function onImageComplete(e:Object) {		trace("onImageComplete: "+e.mc._name);		MultiImage.img[e.mc._name].init();	}	function onMultiComplete(e:Object) {		trace("onMultiComplete: "+this.items.length+" files loaded");		//FX.fade_in(this.box,100);		//this.items[0].show();		//this.action = MouseAction.lib["flip_btn"].clone();		//this.interact();		//this.shadow=Util.createGradientRectangle(this.panel,this.maxwidth,this.maxheight);		//this.panel.onEnterFrame=Delegate.create(this,this.tick);	}	//ACTIONS / MOUSEACTIONS	function set_actions() {		trace("init actions...");		Action.define("flip",this,this.flip);		Action.define("href",this,this.href);		Action.define("over",this,this.h_over);		Action.define("out",this,this.h_out);		Action.define("close_menu",this,this.reset_menu);		MouseAction.define("flip_btn",Action.lib["over"],Action.lib["close_menu"],null,Action.lib["href"]);	}	//ITEMS	function load() {		this.max_count = this.gui.data.item.length;		for (var i = 0; i<this.max_count; i++) {			this.add_item(this.gui.data.url,this.gui.data.item[i].src);		}		this.loader.startLoad();	}	function add_item(url:String, src:String) {		this.items[this.items.length] = new FlipBoxItem(this.loader, this.panel, url, src, this);	}	function tick() {		if (this.i>100) {			this.j = -1;		}		if (this.i<0) {			this.items[this.selected].hide();			this.selected = this.selected<this.items.length-1 ? this.selected+1 : 0;			this.items[this.selected].show();			this.j = 1;		}		this.i += this.j;		this.flip(this.i);	}	function hide_area(){		this.area._visible=false;			}	function show_area(){		this.area._visible=true;			}	function open_menu(){		//FX.move(this.title.panel,null,280,20);		FX.move(this.menupane,0,210,20);	}	function close_menu(){		//FX.move(this.title.panel,null,240,20);		FX.move(this.menupane,0,0,20);		//this.area._visible=true;	}	function reset_menu(){		this.area._visible=true;		this.h_out();	}	function h_out() {		//FX.flip(this.center, 0, 20,true,null,this,this.close_menu);		//if(!this.area._visible){			FX.flip(this.center, 0, 20,true);			this.close_menu();		//}		//FX.hover(this.box,this.width,this.height,70,70,100);			}	function h_over() {		FX.flip(this.center, 0.25, 20,false);		this.open_menu();		this.musicbox.trigger("open",100,0);		//FX.hover(this.box,this.width-10,this.height-10,75,75,100);	}	function flip(i:Number) {		/*		//FRONT | BACK PANEL		var a=this.items[this.selected];		//this.selected=this.selected<this.items.length-1?this.selected+1:0;		//var b=this.items[this.selected];				//LAYOUT VARS		var full=this.maxwidth;		var half=full/2;		var axis=Util.percent(i,half);				//TRANSFORMATION		a.panel._xscale=i;		a.panel._x=half-axis;		this.shadow._alpha=100-i;		this.drop_shadow._alpha=100-i;		this.shadow._x=half-axis;		this.drop_shadow._x=axis-half;		*/	}	function href() {		if (this.gui.data.url != null) {			getURL(this.gui.data.url);		}		trace("HREF: "+this.gui.data.url);	}	function update() {		trace("UPDATE!");	}	//ACTION	function interact() {		//this.box.hitArea=this.area;		this.area.onRollOver = Delegate.create(this, this.over);		this.titlearea.onRollOut = Delegate.create(this, this.out);		//this.area.onPress = Delegate.create(this, this.down);		//this.area.onRelease = this.area.onReleaseOutside=Delegate.create(this, this.up);	}	function over() {		this.hide_area();		this.action.onmouseover.trigger();	}	function out() {		if((this.center._rotation==90)&&(_xmouse<160)){			this.action.onmouseout.trigger();		}	}	function down() {		this.action.onmousedown.trigger();	}	function up() {		this.action.onmouseup.trigger();	}	function test_over(){		trace("over");	}	function test_out(){		trace("out");	}}